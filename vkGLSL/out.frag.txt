#version 450

layout(location = 0) in vec2 TexCoord;
layout(location = 0) out vec4 FragColor;

layout(set = 0, binding = 0) uniform sampler2D u_vram;

layout(push_constant) uniform PushConstants {
    ivec4 u_srcRect;
    bool is24bit;
} pc;

uint FloatTo5bit(float value) {
    return uint(round(value * 31.0));
}

uint SampleVRam16(vec2 pos) {
    ivec2 textureSize = textureSize(u_vram, 0);
    vec4 c = texture(u_vram, pos / vec2(textureSize));
    uint red = FloatTo5bit(c.r);
    uint green = FloatTo5bit(c.g);
    uint blue = FloatTo5bit(c.b);
    uint maskBit = uint(ceil(c.a));
    return (maskBit << 15) | (blue << 10) | (green << 5) | red;
}

vec3 SampleVRam24(ivec2 base, ivec2 offset) {
    ivec2 textureSize = textureSize(u_vram, 0);
    vec2 scale = vec2(textureSize) / vec2(1024.0, 512.0);
    
    vec2 originalPos = vec2(base + offset) / scale;
    
    ivec2 packedPos = ivec2(int(originalPos.x) * 3 / 2, int(originalPos.y));
    
    vec2 samplePos = (vec2(packedPos) + 0.5) * scale;
    
    uint sample1 = SampleVRam16(samplePos);
    uint sample2 = SampleVRam16(samplePos + vec2(scale.x, 0));

    uint r, g, b;
    if ((int(originalPos.x) & 1) == 0) {
        r = sample1 & 0xFF;
        g = (sample1 >> 8) & 0xFF;
        b = sample2 & 0xFF;
    } else {
        r = (sample1 >> 8) & 0xFF;
        g = sample2 & 0xFF;
        b = (sample2 >> 8) & 0xFF;
    }

    return vec3(r/255.0, g/255.0, b/255.0);
}

void main() {
    if (pc.is24bit) {
        ivec2 offset = ivec2(floor(TexCoord * vec2(pc.u_srcRect.zw)));
        vec3 color = SampleVRam24(pc.u_srcRect.xy, offset);
        FragColor = vec4(color, 1.0);
    } else {
        ivec2 textureSize = textureSize(u_vram, 0);
        vec2 texCoord = vec2(pc.u_srcRect.xy) + TexCoord * vec2(pc.u_srcRect.zw);
        FragColor = texture(u_vram, texCoord / vec2(textureSize));
    }
}