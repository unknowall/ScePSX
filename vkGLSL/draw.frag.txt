#version 450
#extension GL_ARB_separate_shader_objects : enable

precision highp float;
precision highp int;
precision highp sampler2D;

layout(location = 0) in vec3 Blend; //x = u_srcBlend;, y =u_destBlend, z = Blendmode;
layout(location = 1) flat in ivec3 mask_draw; //x = setMaskBit, y =drawOpaquePixels, z = drawTransparentPixels
layout(location = 2) flat in ivec2 texWindowMask; //x,y
layout(location = 3) flat in ivec2 texWindowOffset; //x,y

layout(location = 4) in vec3 BlendColor;    // 混合颜色
layout(location = 5) in vec2 TexCoord;      // 纹理坐标
layout(location = 6) in vec3 Position;      // 顶点位置
layout(location = 7) flat in ivec2 TexPageBase; // 纹理页基地址
layout(location = 8) flat in ivec2 ClutBase;    // CLUT 基地址
layout(location = 9) flat in int TexPage;       // 纹理页原始值

layout(location = 0) out highp vec4 FragColor;

layout(set = 0, binding = 1) uniform FragmentUniforms {
    bool u_dither;
    bool u_realColor;
} uniforms;

layout(set = 0, binding = 2) uniform sampler2D u_vram;

layout(input_attachment_index = 0, set = 0, binding = 3) uniform subpassInput u_currentFB;

const int DitherTable[16] = int[16](4, 0, -3, 1, 2, -2, 3, -1, -3, 1, -4, 0, 3, -1, 2, -2);

vec3 FloorVec3(vec3 v) { return floor(v); }

vec3 RoundVec3(vec3 v) { return floor(v + vec3(0.5)); }

uint mod_uint(uint x, uint y) { return x - y * (x / y); }

vec3 Dither24bitTo15Bit(ivec2 pos, vec3 color) {
    uint index = mod_uint(uint(pos.x), 4u) + mod_uint(uint(pos.y), 4u) * 4u;
    float offset = float(DitherTable[index]);
    color = FloorVec3(color) + vec3(offset);
    color = clamp(color, 0.0, 255.0); 
    return FloorVec3(color / 8); 
}

vec3 ConvertColorTo15bit(vec3 color) {
    color *= 31.0;
    return uniforms.u_realColor ? color : RoundVec3(color);
}

vec3 ConvertColorTo24Bit(vec3 color) {
    color *= 255.0;
    return uniforms.u_realColor ? color : RoundVec3(color);
}

int FloatToInt5(highp float value) {
    return int(floor(value * 31.0 + 0.5));
}

vec4 SampleTexture(ivec2 pos) {
    return texture(u_vram, vec2(pos) / vec2(1024.0, 512.0));
}

int SampleUShort(ivec2 pos) {
    vec4 c = SampleTexture(pos);
    // BGR1555 格式转换：c.r=Blue, c.g=Green, c.b=Red
    int blue  = FloatToInt5(c.b);
    int green = FloatToInt5(c.g);
    int red   = FloatToInt5(c.r); 
    int maskBit = int(ceil(c.a));
    return (maskBit << 15) | (blue << 10) | (green << 5) | red; 
}

vec4 SampleColor(ivec2 pos) {
    vec4 color = SampleTexture(pos);
    color.rgb = ConvertColorTo15bit(color.rgb);
    return color;
}

vec4 SampleClut(int index) {
    return SampleColor(ClutBase + ivec2(index, 0));
}

int SampleIndex4(ivec2 texCoord) {
    int sampledValue = SampleUShort(TexPageBase + ivec2(texCoord.x / 4, texCoord.y));
    int shiftAmount = (int(texCoord.x) & 0x3) * 4;
    return (sampledValue >> shiftAmount) & 0xf;
}

int SampleIndex8(ivec2 texCoord) {
    int sampledValue = SampleUShort(TexPageBase + ivec2(texCoord.x / 2, texCoord.y));
    int shiftAmount = (int(texCoord.x) & 0x1) * 8;
    return (sampledValue >> shiftAmount) & 0xff;
}

vec4 LookupTexel() {
    ivec2 texCoord = ivec2(floor(TexCoord + vec2(0.0001))) & ivec2(0xff);
    texCoord.x = (texCoord.x & ~(texWindowMask.x * 8)) | ((texWindowOffset.x & texWindowMask.x) * 8);
    texCoord.y = (texCoord.y & ~(texWindowMask.y * 8)) | ((texWindowOffset.y & texWindowMask.y) * 8);
    int colorMode = (TexPage >> 7) & 0x3;
    if (colorMode == 0) {
        return SampleClut(SampleIndex4(texCoord));
    } else if (colorMode == 1) {
        return SampleClut(SampleIndex8(texCoord));
    } else {
        return SampleColor(TexPageBase + texCoord);
    }
}

void main()
{
    vec4 color;

    float srcBlend =  Blend.x;
    float destBlend =  Blend.y;

    bool u_setMaskBit =  mask_draw.x > 0;
    bool u_drawOpaquePixels =  mask_draw.y > 0;
    bool u_drawTransparentPixels =  mask_draw.z > 0;

    vec3 blendColor = ConvertColorTo24Bit(BlendColor.bgr);  // 输入BGR转RGB

    if ((TexPage & (1 << 11)) != 0) {
        color = vec4(blendColor, 0.0);
    } else {
        color = LookupTexel();
        if (color == vec4(0.0)) discard;

        if (color.a == 0.0) {
            if (!u_drawOpaquePixels) discard;
            srcBlend = 1.0;
            destBlend = 0.0;
        } else if (!u_drawTransparentPixels) {
            discard;
        }
        color.rgb = (color.rgb * blendColor.rgb) / 16.0;
    }

    if (uniforms.u_realColor) {
        color.rgb /= 255.0;
    } else if (uniforms.u_dither) {
        ivec2 pos = ivec2(floor(Position.xy + vec2(0.0001)));
        color.rgb = Dither24bitTo15Bit(pos, color.rgb) / 31.0;
    } else {
        color.rgb = FloorVec3(color.rgb/ 8) / 31.0;
    }

    if (u_setMaskBit) {
        color.a = 1.0;
    }

    FragColor = vec4(color.rgb, color.a); 
}