#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(location = 0) in vec2 TexCoord;
layout(location = 0) out vec4 FragColor;

layout(set = 0, binding = 0) uniform sampler2D u_vram;

layout(push_constant) uniform PushConstants {
    ivec4 u_srcRect;
} pc;

uint FloatTo5bit(float value) {
    return uint(round(clamp(value, 0.0, 1.0) * 31.0));
}

uint SampleVRAM16(ivec2 pos) {
    vec4 c = texture(u_vram, vec2(pos) / vec2(1024.0, 512.0));
    return (uint(ceil(c.a)) << 15) 
         | (FloatTo5bit(c.b) << 10) 
         | (FloatTo5bit(c.g) << 5) 
         | FloatTo5bit(c.r);
}

vec3 SampleVRAM24(ivec2 base, ivec2 offset) {
    int x = base.x + (offset.x * 3) / 2;
    int y = base.y + offset.y;

    uint sample1 = SampleVRAM16(ivec2(x, y));
    uint sample2 = SampleVRAM16(ivec2(x + 1, y));

    uint r, g, b;
    if ((offset.x & 1) == 0) {
        r = sample1 & 0xFFu;
        g = (sample1 >> 8) & 0xFFu;
        b = sample2 & 0xFFu;
    } else {
        r = (sample1 >> 8) & 0xFFu;
        g = sample2 & 0xFFu;
        b = (sample2 >> 8) & 0xFFu;
    }

    return vec3(r, g, b) / 255.0;
}

void main() {
    ivec2 base = pc.u_srcRect.xy;
    ivec2 offset = ivec2(
        TexCoord * vec2(pc.u_srcRect.zw) + vec2(0.5)
    );

    vec3 colorResult = SampleVRAM24(base, offset);
    FragColor = vec4(colorResult, 1.0);
}